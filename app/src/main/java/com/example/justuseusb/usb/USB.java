//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Common Commucations
//  @ File Name : USB.java
//  @ Date : 2019-06-18
//  @ Author : liuzq
//
//


package com.example.justuseusb.usb;

import android.content.Context;
import android.hardware.usb.UsbDevice;
import android.util.Log;

import java.io.IOException;
import java.nio.ByteBuffer;

import com.example.justuseusb.usb.base.DeviceManager;
import com.example.justuseusb.usb.base.IUsbControl;
import com.example.justuseusb.usb.base.IUsbDataListener;
import com.example.justuseusb.usb.base.IUsbDeviceListener;
import com.example.justuseusb.usb.base.UsbControlFactory;
import com.example.justuseusb.usb.util.UsbInputOutputManager;


/**
 * USB设备的通信示例
 */
public class USB implements IUsbService{
    private static final String TAG = "USB";
    private DeviceManager deviceManager; //deviceManager 设备连接控制实例
    private IUsbControl mIUsbControl; //mIUsbControl 数据读取实例
    private UsbInputOutputManager usbIoManager;

    @Override
    public int Connect(Context context, int pid, int vid,int transferType) {
        if (deviceManager == null) {
            deviceManager = new DeviceManager(context,transferType);
        }
        deviceManager.setIUsbDeviceListener(new IUsbDeviceListener() {
            @Override
            public void onDeviceFind(UsbDevice usbDevice) {
                Log.d(TAG, "找到设备!");
            }

            @Override
            public void onNoDeviceFind() {
                Log.e(TAG, "没有找到设备!");
            }

            @Override
            public void onPermissionDenied(String s) {
                Log.e(TAG, "USB设置禁止访问!");
            }

            @Override
            public void onDeviceConnect(IUsbControl iUsbControl) {
                mIUsbControl = iUsbControl;
                startIoManager();
                Log.d(TAG, "连接USB成功!");
            }

            @Override
            public void onDeviceError(Exception e) {
                Log.e(TAG, "连接USB失败!");
            }

            @Override
            public void onDeviceDisconnect(UsbDevice device) {
                stopIoManager();
                Log.e(TAG, "USB设备断开连接!");
            }
        });
        //需要连接的设备pid vid
        deviceManager.connect(pid, vid);
        return 0;
    }

    @Override
    public int Disconnect() {
        stopIoManager();
        if (deviceManager != null) {
            deviceManager.release();
            deviceManager = null;
        }
        return 0;
    }


    @Override
    public int SendCommand(byte[] commandData) {
        if (mIUsbControl != null) {
            try {
                return mIUsbControl.write(commandData, 200);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return 0;
    }

    private IUsbDataListener iUsbDataListener=null;
    @Override
    public void setUsbDataListener(IUsbDataListener iUsbDataListener) {
        this.iUsbDataListener=iUsbDataListener;
    }

    /**
     * 同步读取
     */
    public void readSync(byte[] des) {
        if (mIUsbControl != null) {
            try {
                ByteBuffer byteBuffer = mIUsbControl.read(200);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    /**
     * 可以定义一些设备间的控制类消息
     */
    public void controlTransfer() {
        if (mIUsbControl != null) {
            byte[] bytes = new byte[3];
            mIUsbControl.controlTransferProxy(128, 0xb3, 1, 0, bytes, 3, 300);
            if (bytes[0] != 0) {
            }
        }
    }


    /**
     * 开启一个异步轮询读取设备数据
     * 当将数据存入缓存时需要注意：
     * {
     * 缓存，需要避免缓存无限增加的问题。根据需求可以通过限制缓存大小或者阻塞线程等方式避免oom
     */
    private void startIoManager() {
        if (mIUsbControl != null) {
            usbIoManager = new UsbInputOutputManager.Builder()
                    .setReadRate(0)
                    .setTimeOut(10)
                    .create(mIUsbControl, readListener);
            //读取io数据
            new Thread(usbIoManager, "usbDataThread").start();
        }
    }

    private void stopIoManager() {
        if (usbIoManager != null) {
            usbIoManager.stop();
            usbIoManager = null;
        }
    }

    private final UsbInputOutputManager.Listener readListener = new UsbInputOutputManager.Listener() {
        @Override
        public void onNewData(byte[] receivedData, UsbInputOutputManager manager) {
            //Log.e("onNewData", "拿到数据-------" + receivedData.length+"-------"+receivedData[6]);
            if(iUsbDataListener!=null){
                iUsbDataListener.dealUsbData(receivedData);
            }
        }

        @Override
        public void onRunError(Exception e) {
            Log.e("onRunError", e.getMessage());
        }
    };

}